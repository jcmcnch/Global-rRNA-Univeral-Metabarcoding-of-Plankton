color = "Pressure"))
View(tm.i9.relevant)
## 20) Plot to see how close the reported pressures by Carlson lab are to the depth reported
## in the TM cast data using assumed niskin numbers
ggplot()+
geom_point(data = tm.i9.relevant, aes(x = DEPTH_m, y = Depth_crosscheck, color = "Depth"))+
geom_point(data = tm.i9.relevant, aes(x = DEPTH_m, y = Pressure_crosscheck,
color = "Pressure"))
## 10) Not fully convinced that the "Depth" reported in the TM cast is actually depth since
## that value is extremely close to the reported "CTDPRS..DBAR." from Carlson lab but it's
## fair to assume the DNA_ID using assumed niskin numbers are correct so subset I9N TM using
## the DNA_ID.
i9n.tm <- tm.i9.relevant[tm.i9.relevant$DNA_ID %in%
df.raw$DNA_ID[df.raw$CRUISE=="I9N"],]
View(i9n.tm)
i9n.tm$Pressure_crosscheck-i9n.tm$DEPTH_m
## Discuss with JM and finalize what the true depth (m) to provide as metadata. Since depth
## is never measure with CTD and later calculated, I doubt that the raw TM data is actually
## reporting depth. Thus, I believe their DEPTH column should be CTD.PRS.dBar and
## we should calculate the depth using OCE package based on this actual reported pressure.
i9n.tm$Actual_Depth <- swDepth(pressure = i9n.tm$DEPTH_m,
latitude = i9n.tm$LATITUDE)
View(i9n.tm)
View(i9n.tm)
colnames(i8s.r)
colnames(i8s.tm)
## 22) Subset only the following relevant columns and homogenize the column names
## before merging into sample metadata table for downstream use.
temp <- i8s.tm[,c("DNA_ID", "LATITUDE", "LONGITUDE", "DEPTH", "Pressure_crosscheck",
"Actual_Depth")]
## 22) Subset only the following relevant columns and homogenize the column names
## before merging into sample metadata table for downstream use.
temp <- i8s.tm[,c("DNA_ID","Cruise","Station","Niskin", "LATITUDE", "LONGITUDE",
"DEPTH", "Pressure_crosscheck","Actual_Depth")]
colnames(temp) <- c("DNA_ID","Cruise","Station","Niskin", "Latitude", "Longitude",
"TM_Depth_Pressure", "Carlson_Pressure","TM_Depth_calculated")
temp2 <- i8s.r[,c("DNA_ID","Cruise","Station","Niskin", "LATITUDE", "LONGITUDE",
"DEPTH", "Pressure_crosscheck","Actual_Depth")]
colnames(i8s.r)
LATITUDE
i8s.r$Actual_Depth <- swDepth(pressure = i8s.r$CTDPRS_dbar,
latitude = i8s.r$LATITUDE)
i8s.r$Pressure_crosscheck <- df.raw$CTDPRS..DBAR.[match(i8s.r$DNA_ID,
df.raw$DNA_ID)]
temp2 <- i8s.r[,c("DNA_ID","Cruise","Station","Niskin", "LATITUDE", "LONGITUDE",
"CTDPRS_dbar", "Pressure_crosscheck","Actual_Depth")]
View(temp2)
colnames(temp) <- c("DNA_ID","Cruise","Station","Niskin", "Latitude", "Longitude",
"Depth_or_Pressure", "Carlson_Pressure","Depth_calculated")
colnames(temp2) <- c("DNA_ID","Cruise","Station","Niskin", "Latitude", "Longitude",
"Depth_or_Pressure", "Carlson_Pressure","Depth_calculated")
temp3 <- i9n.tm[,c("DNA_ID","Cruise","Station","Niskin", "LATITUDE", "LONGITUDE",
"DEPTH_m", "Pressure_crosscheck","Actual_Depth")]
colnames(temp3) <- c("DNA_ID","Cruise","Station","Niskin", "Latitude", "Longitude",
"Depth_or_Pressure", "Carlson_Pressure","Depth_calculated")
i8s.i9n.final <- rbind(temp, temp2, temp3)
View(i8s.i9n.final)
## input file = data entry test
input.file1 <- c("/Users/yubinraut/Documents/LJ/20221220_LJ_Sales_Data_Entry.csv")
df <- read.csv(input.file1)
View(df)
View(df)
df$Balance_Due <- df$Total_Amount-df$Total_Paid
View(df)
## daily over/short
daily.test <- aggregate(df$Balance_Due, by=list(df$Date),
function(x) sum(x, na.rm = T))
View(daily.test)
df2 <- df
df2[,c(3:4)] <- abs(df2[,c(3:4)])
View(df2)
df2$Balance_Due <- df$Total_Amount-df$Total_Paid
## daily over/short
daily.test <- aggregate(df2$Balance_Due, by=list(df2$Date),
function(x) sum(x, na.rm = T))
View(daily.test)
df2$Balance_Due <- df2$Total_Amount-df2$Total_Paid
## daily over/short
daily.test <- aggregate(df2$Balance_Due, by=list(df2$Date),
function(x) sum(x, na.rm = T))
View(daily.test)
View(df2)
temp <- aggregate(df2$Total_Amount, by = list(df2$Invoice_Number),
function(x), mean(x, na.rm = T))
temp <- aggregate(df2$Total_Amount, by = list(df2$Invoice_Number),
function(x) mean(x, na.rm = T))
View(temp)
temp2 <- aggregate(df2$Total_Paid, by = list(df2$Invoice_Number),
function(x) sum(x, na.rm = T))
View(temp2)
temp$Total_Paid <- temp2$x[match(temp$Group.1, temp2$Group.1)]
View(temp)
temp$Balance_Due <- temp$x-temp$Total_Paid
View(temp)
View(temp)
## input file = data entry test
input.file1 <- c("/Users/yubinraut/Documents/LJ/20221220_LJ_Sales_Data_Entry.csv")
df <- read.csv(input.file1)
View(df)
## input file = data entry test
input.file1 <- c("/Users/yubinraut/Documents/LJ/20221220_LJ_Sales_Data_Entry.csv")
df <- read.csv(input.file1)
View(df)
temp <- aggregate(df$Total_Amount, by = list(df$Invoice_Number),
function(x) sum(x, na.rm = T))
View(temp)
df <- read.csv(input.file1)
temp <- aggregate(df$Total_Amount, by = list(df$Invoice_Number),
function(x) sum(x, na.rm = T))
View(temp)
temp2 <- aggregate(df$Total_Paid, by = list(df$Invoice_Number),
function(x) sum(x, na.rm = T))
View(temp2)
temp$Total_Paid <- temp2$x[match(temp$Group.1, temp2$Group.1)]
View(temp)
temp$Balance_Due <- temp$x-temp$Total_Paid
View(temp)
temp2 <- aggregate(df$Total_Paid[!df$Transaction_Type=="Merchandise_Return",], by = list(df$Invoice_Number),
function(x) sum(x, na.rm = T))
temp2 <- aggregate(df$Total_Paid[!df$Transaction_Type=="Merchandise_Return"], by = list(df$Invoice_Number),
function(x) sum(x, na.rm = T))
df$Total_Paid[!df$Transaction_Type=="Merchandise_Return"]
df2 <- df[!df$Transaction_Type=="Merchandise_Return",]
View(df2)
temp2 <- aggregate(df2$Total_Paid, by = list(df2$Invoice_Number),
function(x) sum(x, na.rm = T))
temp$Total_Paid <- temp2$x[match(temp$Group.1, temp2$Group.1)]
temp$Balance_Due <- temp$x-temp$Total_Paid
View(temp)
View(temp)
## daily over/short
daily.test <- aggregate(df$Total_Paid, by=list(df$Transaction_Type),
function(x) sum(x, na.rm = T))
View(daily.test)
## daily over/short
daily.test <- aggregate(df$Total_Paid, by=list(df$Date,df$Transaction_Type),
function(x) sum(x, na.rm = T))
View(daily.test)
daily.test <- daily.test[with(daily.test, order(daily.test$Group.1)),]
View(daily.test)
## input file = data entry test
input.file1 <- c("/Users/yubinraut/Documents/LJ/20221220_LJ_Sales_Data_Entry_Test.csv")
df <- read.csv(input.file1)
View(df)
colnames(df)
df$Total_Paid_Crosscheck <- colSums(df[,c("Cash","Credit","Check","Zelle",
"Other_Transaction")], na.rm = T)
df$Total_Paid_Crosscheck <- rowSums(df[,c("Cash","Credit","Check","Zelle",
"Other_Transaction")], na.rm = T)
View(df)
df$Balance_Due <- df$Total_Paid-df$Total_Paid_Crosscheck
View(df)
## input file = data entry test
input.file1 <- c("/Users/yubinraut/Documents/LJ/20221220_LJ_Sales_Data_Entry_Test.csv")
df <- read.csv(input.file1)
df$Total_Paid_Crosscheck <- rowSums(df[,c("Cash","Credit","Check","Zelle",
"Other_Transaction")], na.rm = T)
df$Balance_Due <- df$Total_Paid-df$Total_Paid_Crosscheck
View(df)
df <- read.csv(input.file1)
df$Total_Paid_Crosscheck <- rowSums(df[,c("Cash","Credit","Check","Zelle",
"Other_Transaction")], na.rm = T)
df$Balance_Due <- df$Total_Paid-df$Total_Paid_Crosscheck
View(df)
df[!df$Balance_Due==0,]
df[df$Invoice_Number==5051,]
## input file = data entry test
input.file1 <- c("/Users/yubinraut/Documents/LJ/20221220_LJ_Sales_Data_Entry_Test.csv")
df <- read.csv(input.file1)
df$Total_Paid_Crosscheck <- rowSums(df[,c("Cash","Credit","Check","Zelle",
"Other_Transaction")], na.rm = T)
df$Balance_Due <- df$Total_Paid-df$Total_Paid_Crosscheck
df[!df$Balance_Due==0,]
## G1
## 1) Input files = .csv version of tabs "P16S_2005" and "P16N_2006"
## from the "CLIVAR_DNALOG_CARLSON2019.xlsx" file from Carlson Lab
## P16S tab excludes Station 09
input.file1 <- "/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_Carlson_Lab/20221104_P16S_Raw_DNA_ID.csv"
df.s <- read.csv(input.file1)
## Subset P16S with relevant overlapping columns
df.s <- df.s[,c("DNA_ID","CRUISE","STATION","NISKIN",
"Latitude..degrees_north.","Longitude..degrees_east.",
"CTDPRS..DBAR.")]
colnames(df.s) <- c("DNA_ID", "Cruise", "Station", "Niskin",
"Latitude_degrees_N","Longitude_degrees_E",
"CTD_Pressue_dbar")
## P16N tab excludes Station 02
input.file2 <- "/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_Carlson_Lab/20221104_P16N_Raw_DNA_ID.csv"
df.n <- read.csv(input.file2)
## Subset P16N with relevant overlapping columns
df.n <- df.n[,c("DNA_ID","CRUISE","STATION","NISKIN",
"Latitude..degrees_north.","Longitude..degrees_east.",
"CTDPRS.DBARS.")]
colnames(df.n) <- c("DNA_ID", "Cruise", "Station", "Niskin",
"Latitude_degrees_N","Longitude_degrees_E",
"CTD_Pressue_dbar")
## 2) Merge the P16 S and N transects
p16sn.raw <- rbind(df.s,df.n)
## 3) Per the notes on "SAMPLE SUMMARY" tab on the raw .xlsx file, all samples
## were taken from Trace Metals Cast so add that as cast type column
p16sn.raw$Cast_Type <- "Trace_Metal"
## 4) Merged P16 S and N trace metal cast CTD data downloaded from BCO-DMO
## http://data.bco-dmo.org/jg/info/BCO/CLIVAR_AEROSOL/P16_Trace_Metal_Profiles%7Bdir=data.bco-dmo.org/jg/dir/BCO/CLIVAR_AEROSOL/,data=data.bco-dmo.org:80/jg/serv/BCO/CLIVAR_AEROSOL/P16_trace_metal_profiles.html0%7D?
input.file3 <- "/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_CTD_Casts/P16NS_Tracemetal_Cast_BCO_DMO.csv"
df.tm.raw <- read.csv(input.file3)
## 5) Concatenate Cruise, Station, and Niskin analogous columns to produce DNA_ID
## Cruise
df.tm.raw$Cruise <- sub("^([^_]*)_([^_]*).*", "\\1", df.tm.raw$EXPOCODE)
## Station - make sure to add leading zeroes so it's two digits
## so it matches existing DNA_ID
df.tm.raw$Station <- paste("S",sprintf("%02d", df.tm.raw$STNNBR), sep = "")
## Niskin - assuming analogous column in trace metal CTD cast is "SAMPNO"
df.tm.raw$Niskin <- paste("N",sprintf("%02d",df.tm.raw$SAMPNO), sep = "")
## Concatenate
df.tm.raw$DNA_ID <- paste(df.tm.raw$Cruise, df.tm.raw$Station,
df.tm.raw$Niskin, sep = "-")
## 6) Add CTD pressure from trace metal casts
p16sn.raw$TM_Pressure <- df.tm.raw$CTDPRS[match(p16sn.raw$DNA_ID,
df.tm.raw$DNA_ID)]
## 7) If NAs exist, replace with constant of -100
p16sn.raw$TM_Pressure <- ifelse(is.na(p16sn.raw$TM_Pressure), -100,
p16sn.raw$TM_Pressure)
## 8) Calculate absolute difference between the two pressures
p16sn.raw$Difference <- abs(p16sn.raw$CTD_Pressue_dbar-p16sn.raw$TM_Pressure)
## 9) Compare the pressure reported for each sample with unique DNA_ID with
## corresponding pressure from the associated trace metal cast
## Plot
library(ggplot2)
p1 <- ggplot()+
geom_point(data = p16sn.raw, aes(x = CTD_Pressue_dbar, y = TM_Pressure,
color = Cruise))+
geom_point(data = p16sn.raw[p16sn.raw$Difference > 10,],
aes(x = CTD_Pressue_dbar, y = TM_Pressure), shape = 1,
size = 3)+
geom_text(data = p16sn.raw[p16sn.raw$Difference > 10,],
aes(x = CTD_Pressue_dbar, y = TM_Pressure,
label = DNA_ID), hjust = 0.5, vjust = -1)+
theme_minimal()
p1
## G2
## All the problem stations where discrepancies occur are along the P16S transect
## Problem cluster 1: At fixed pressure -100 along y-axis (TM_Pressure)
## This suggests that these samples did not in fact come from the trace metal
## 1) Identify the range of Niskin numbers from problem cluster 1
range(p16sn.raw$Niskin[p16sn.raw$Difference > 10]) ## 8 - 36
## 2) Identify the range of Niskin numbers from TM casts
range(df.tm.raw$Niskin) ## N01 - N15
## Since the Niskin numbers range from 8 - 36, we can definitively conclude
## that they could not have all come trace metal casts, which range from 1 -15
## 3) P16S regular casts CTD data: National Centers for Environmental Information - NOAA
## https://www.ncei.noaa.gov/access/ocean-carbon-acidification-data-system/oceans/ndp_090/
input.file4 <- c("/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_CTD_Casts/P16S_Easier_to_navigate_YR_20211025_NCEI_NOAA.csv")
p16s.reg.raw <- read.csv(input.file4)
## 4) Concatenate Cruise, Station, and Niskin analogous columns to produce DNA_ID
## Cruise - make sure to trim leading whitespace
p16s.reg.raw$Cruise <- trimws(p16s.reg.raw$SECT_ID, "l")
## Station - make sure to add leading zeroes so it's two digits
## so it matches existing DNA_ID
p16s.reg.raw$Station <- paste("S",sprintf("%02d", p16s.reg.raw$STNNBR), sep = "")
## Niskin - assuming analogous column in regular CTD cast is "SAMPNO" or "BTLNBR"
p16s.reg.raw$Niskin <- paste("N",sprintf("%02d",p16s.reg.raw$SAMPNO), sep = "")
## Concatenate
p16s.reg.raw$DNA_ID <- paste(p16s.reg.raw$Cruise, p16s.reg.raw$Station,
p16s.reg.raw$Niskin, sep = "-")
## 5) Add CTD pressure from regular casts
p16sn.raw$Reg_Pressure <- p16s.reg.raw$CTDPRS[match(p16sn.raw$DNA_ID,
p16s.reg.raw$DNA_ID)]
## 6) Create new pressure column that's a combination of TM and Reg casts
p16sn.raw$TM_Reg_Pressure <- ifelse(p16sn.raw$TM_Pressure == -100,
p16sn.raw$Reg_Pressure,
p16sn.raw$TM_Pressure)
p16sn.raw$Cast_Type <- ifelse(p16sn.raw$TM_Pressure == -100,
"Regular_Cast", p16sn.raw$Cast_Type)
## 7) Calculate new absolute difference between the original pressure and
## pressure derived from either TM or Reg CTD cast
p16sn.raw$Difference2 <- abs(p16sn.raw$CTD_Pressue_dbar-p16sn.raw$TM_Reg_Pressure)
## 8) Compare the pressure reported for each sample with unique DNA_ID with
## corresponding pressure from the associated TM or reg cast
p2 <- ggplot()+
geom_point(data = p16sn.raw, aes(x = CTD_Pressue_dbar, y = TM_Reg_Pressure,
color = Cruise))+
geom_point(data = p16sn.raw[p16sn.raw$Difference2 > 10,],
aes(x = CTD_Pressue_dbar, y = TM_Reg_Pressure), shape = 1,
size = 3)+
geom_text(data = p16sn.raw[p16sn.raw$Difference2 > 10,],
aes(x = CTD_Pressue_dbar, y = TM_Reg_Pressure,
label = DNA_ID), hjust = 0.5, vjust = -1)+
theme_minimal()
p2
## Problem cluster 2: remnant problem samples from S47 which are from TM cast
p16s.47 <- p16sn.raw[p16sn.raw$Cruise=="P16S"&p16sn.raw$Station==47,]
p16s.47.raw <- df.tm.raw[df.tm.raw$Cruise=="P16S"&df.tm.raw$Station=="S47",
c("DNA_ID","CTDPRS")]
## Add the recorded pressures to compare more easily
p16s.47.raw$Manual_Record_Pressure <- p16s.47$CTD_Pressue_dbar[
match(p16s.47.raw$DNA_ID, p16s.47$DNA_ID )]
# p3.1
## If you put the CTD pressures for the correct DNA_ID
## the plot follows a Martin curve distribution.
## Conclusion for P16S-S47: the manual recorded target pressures are reliable
## and what's incorrect is their recorded Niskin IDs.
## P16S-S47-N14 should be called P16S-S47-N08
## P16S-S47-N08 should be called P16S-S47-N14
## P16S-S47-N15 should be called P16S-S47-N05
## JM will change these DNA_IDs to accurately reflect the confirmed changes.
## 11) Manually change it here
p16sn.raw$DNA_ID_Confirmed <- p16sn.raw$DNA_ID
# p3.1
## If you put the CTD pressures for the correct DNA_ID
## the plot follows a Martin curve distribution.
## Conclusion for P16S-S47: the manual recorded target pressures are reliable
## and what's incorrect is their recorded Niskin IDs.
## P16S-S47-N14 should be called P16S-S47-N08
## P16S-S47-N08 should be called P16S-S47-N14
## P16S-S47-N15 should be called P16S-S47-N05
## JM will change these DNA_IDs to accurately reflect the confirmed changes.
## 11) Manually change it here
p16sn.raw$DNA_ID_Confirmed <- p16sn.raw$DNA_ID
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S47-N14",
"P16S-S47-N08", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S47-N08",
"P16S-S47-N14", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S47-N15",
"P16S-S47-N05", p16sn.raw$DNA_ID_Confirmed)
# p3.1
## If you put the CTD pressures for the correct DNA_ID
## the plot follows a Martin curve distribution.
## Conclusion for P16S-S47: the manual recorded target pressures are reliable
## and what's incorrect is their recorded Niskin IDs.
## P16S-S47-N14 should be called P16S-S47-N08
## P16S-S47-N08 should be called P16S-S47-N14
## P16S-S47-N15 should be called P16S-S47-N05
## JM will change these DNA_IDs to accurately reflect the confirmed changes.
## 11) Manually change it here
p16sn.raw$DNA_ID_Confirmed <- p16sn.raw$DNA_ID
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S47-N14",
"P16S-S47-N08", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S47-N08",
"P16S-S47-N14", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S47-N15",
"P16S-S47-N05", p16sn.raw$DNA_ID_Confirmed)
## Problem cluster 3: newly identified samples from S84 which are
## from Reg CTD cast
p16s.84 <- p16sn.raw[p16sn.raw$Cruise=="P16S"&p16sn.raw$Station==84,]
p16s.84.raw <- p16s.reg.raw[p16s.reg.raw$Station=="S84",
c("DNA_ID","CTDPRS")]
p16s.84.raw$Manual_Record_Pressure <- p16s.84$CTD_Pressue_dbar[
match(p16s.84.raw$DNA_ID, p16s.84$DNA_ID )]
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S84-N27",
"P16S-S84-N26", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S84-N26",
"P16S-S84-N25", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S84-N24",
"P16S-S84-N23", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S84-N22",
"P16S-S84-N21", p16sn.raw$DNA_ID_Confirmed)
p16sn.raw$DNA_ID_Confirmed <- ifelse(p16sn.raw$DNA_ID=="P16S-S84-N20",
"P16S-S84-N19", p16sn.raw$DNA_ID_Confirmed)
## G1
## 1) Input files = corrected DNA ID and cast type file
input.file1 <- "/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Data/0.P16NS_Raw_Data/1.20230530_P16NS_Confirmed_DNA_ID_Cast_Type.csv"
dna.id <- read.csv(input.file1)
## 2) Subset by TM and reg casts
df.tm <- dna.id[dna.id$Cast_Type=="Trace_Metal",]
df.reg <- dna.id[dna.id$Cast_Type=="Regular_Cast",]
## 3) Merged P16 S and N trace metal cast CTD data downloaded from BCO-DMO
## http://data.bco-dmo.org/jg/info/BCO/CLIVAR_AEROSOL/P16_Trace_Metal_Profiles%7Bdir=data.bco-dmo.org/jg/dir/BCO/CLIVAR_AEROSOL/,data=data.bco-dmo.org:80/jg/serv/BCO/CLIVAR_AEROSOL/P16_trace_metal_profiles.html0%7D?
input.file2 <- "/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_CTD_Casts/P16NS_Tracemetal_Cast_BCO_DMO.csv"
df.tm.raw <- read.csv(input.file2)
## 4) Concatenate Cruise, Station, and Niskin analogous columns to produce DNA_ID
## Cruise
df.tm.raw$Cruise <- sub("^([^_]*)_([^_]*).*", "\\1", df.tm.raw$EXPOCODE)
## Station - make sure to add leading zeroes so it's two digits
## so it matches existing DNA_ID
df.tm.raw$Station <- paste("S",sprintf("%02d", df.tm.raw$STNNBR), sep = "")
## Niskin - assuming analogous column in trace metal CTD cast is "SAMPNO"
df.tm.raw$Niskin <- paste("N",sprintf("%02d",df.tm.raw$SAMPNO), sep = "")
## Concatenate
df.tm.raw$DNA_ID <- paste(df.tm.raw$Cruise, df.tm.raw$Station,
df.tm.raw$Niskin, sep = "-")
## 5) Subset TM CTD casts by corrected DNA_ID
## list of columns to merge from CTD data
tm.raw.cols <- c("DNA_ID","Cruise","Station","Niskin","latitude","longitude",
"DATE","CTDPRS","TEMPERATURE","SALNTY","OXYGEN","PHSPHT",
"SILCAT","NITRAT","NITRIT")
df.tm.merged <- merge(x = df.tm[,c("Original_DNA_ID","Corrected_DNA_ID","Cast_Type")],
y = df.tm.raw[,tm.raw.cols], by.x = "Corrected_DNA_ID",
by.y = "DNA_ID")
## 3) P16S regular casts CTD data: National Centers for Environmental Information - NOAA
## https://www.ncei.noaa.gov/access/ocean-carbon-acidification-data-system/oceans/ndp_090/
input.file3 <- c("/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_CTD_Casts/P16S_Easier_to_navigate_YR_20211025_NCEI_NOAA.csv")
p16s.reg.raw <- read.csv(input.file3)
## 7) Concatenate Cruise, Station, and Niskin analogous columns to produce DNA_ID
## Cruise - make sure to trim leading whitespace
p16s.reg.raw$Cruise <- trimws(p16s.reg.raw$SECT_ID, "l")
## Station - make sure to add leading zeroes so it's two digits
## so it matches existing DNA_ID
p16s.reg.raw$Station <- paste("S",sprintf("%02d", p16s.reg.raw$STNNBR), sep = "")
## Niskin - assuming analogous column in regular CTD cast is "SAMPNO" or "BTLNBR"
p16s.reg.raw$Niskin <- paste("N",sprintf("%02d",p16s.reg.raw$SAMPNO), sep = "")
## Concatenate
p16s.reg.raw$DNA_ID <- paste(p16s.reg.raw$Cruise, p16s.reg.raw$Station,
p16s.reg.raw$Niskin, sep = "-")
## 8) Subset reg CTD casts by corrected DNA_ID
## list of columns to merge from CTD data
reg.raw.cols <- c("DNA_ID","Cruise","Station","Niskin","LATITUDE","LONGITUDE",
"DATE","CTDPRS","CTDTMP","SALNTY","OXYGEN","PHSPHT",
"SILCAT","NITRAT","NITRIT")
df.reg.merged <- merge(x = df.reg[,c("Original_DNA_ID","Corrected_DNA_ID", "Cast_Type")],
y = p16s.reg.raw[,reg.raw.cols], by.x = "Corrected_DNA_ID",
by.y = "DNA_ID")
## 9 Homogenize the colnames to merge into one df
colnames(df.tm.merged) <- c("Corrected_DNA_ID","Original_DNA_ID","Cast_Type",
"Cruise","Station","Niskin","Latitude","Longitude",
"Date","Pressure","Temperature","Salinity","Oxygen",
"Phosphate","Silicate","Nitrate","Nitrite")
colnames(df.reg.merged) <- c("Corrected_DNA_ID","Original_DNA_ID","Cast_Type",
"Cruise","Station","Niskin","Latitude","Longitude",
"Date","Pressure","Temperature","Salinity","Oxygen",
"Phosphate","Silicate","Nitrate","Nitrite")
p16ns.metadata <- rbind(df.tm.merged, df.reg.merged)
##G2
## 1) input file = manual photic zone binning done by JM and YR
input.file4 <- c("/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_Extra_Files/20221028_P16NS_Euphotic_Zone_Manual_Binning_Done_YR.csv")
photic <- read.csv(input.file4)
p16ns.metadata <- rbind(df.tm.merged, df.reg.merged)
##G2
## 1) input file = manual photic zone binning done by JM and YR
input.file4 <- c("/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_Extra_Files/20221028_P16NS_Euphotic_Zone_Manual_Binning_Done_YR.csv")
photic <- read.csv(input.file4)
## 2) Add photic zone by matching with original DNA_ID
p16ns.metadata$Photic.Zone <- photic$Zone[match(p16ns.metadata$Original_DNA_ID,
photic$DNA_ID)]
## 3) Count how many samples don't have a photic designation
sum(is.na(p16ns.metadata$Photic.Zone)) ## 9 samples
## 4) For samples from P16N-S47, you need a separate matching DNA_ID
photic$DNA_ID2 <- gsub("(^P16N-S47-N[0-9]{2}).*", "\\1", photic$DNA_ID)
## 5) Add photic bin for these P16N-S47 samples
p16ns.metadata$Photic.Zone <- ifelse(is.na(p16ns.metadata$Photic.Zone),
photic$Zone[match(
p16ns.metadata$Original_DNA_ID,
photic$DNA_ID2)],
p16ns.metadata$Photic.Zone)
sum(is.na(p16ns.metadata$Photic.Zone)) ## 3 samples left
## 6) Manually remove these 3 samples since all 3 were confirmed with JM to
## have insufficient sequencing coverage (< 5,000 reads/sample) and are
## excluded from out dataset
p16ns.metadata$Original_DNA_ID[is.na(p16ns.metadata$Photic.Zone)]
samples.exclude <- c("P16N-S26-N08","P16N-S40-N01","P16N-S61-N06")
p16ns.final <- p16ns.metadata[!p16ns.metadata$Original_DNA_ID
%in% samples.exclude,]
sum(is.na(p16ns.final$Photic.Zone)) ## 0 samples left
## 7) input file = [DNA]
input.file5 <- c("/Users/yubinraut/Documents/Fuhrman_Lab/CBIOMES_Biogeography/P16NS/Source_Files/P16NS_Extra_Files/221116_P16N-S_DNA_concentrations_for_CMAP.tsv")
dna.con <- read.csv(input.file5, sep = "\t", header = T)
## 8) Add [DNA] column matching to original DNA_ID
p16ns.final$DNA.concentration.ng.uL <- dna.con$DNA.extract.concentration..ng.µL.[
match(p16ns.final$Original_DNA_ID, dna.con$Original_SampleID)]
## 9) Add SW depth based on oce package function using pressure (dbar)
## and latitude (degN = decimal degrees with positive in N hemisphere)
library(oce)
p16ns.final$Depth <- swDepth(pressure = p16ns.final$Pressure,
latitude = p16ns.final$Latitude)
## 10) Only include the corrected DNA IDs and moving forward, this is all that will be used
p16ns.final2 <- p16ns.final[,c(1,3:20)]
## 11) Change colnames to include units
colnames(p16ns.final2) <- c("DNA_ID","Cast_Type","Cruise","Station","Niskin",
"Latitude.degrees.North", "Longitude.degrees.East",
"Date.yyyy.mm.dd", "Pressure.decibars",
"Temperature.degrees.Celsius", "Salinity.psu",
"Oxygen.umol.kg", "Phosphate.umol.kg", "Silicate.umol.kg",
"Nitrate.umol.kg", "Nitrite.umol.kg", "Photic.Zone",
"DNA.concentration.ng.uL","Depth.meters")
View(p16ns.final2)
View(p16ns.final2)
View(p16ns.final2)
## 12) Plot the DNA concentrations for each unique station to see if it follows
dna.plot <- p16ns.final2
dna.plot$Facet <- paste(dna.plot$Cruise, dna.plot$Station, sep = "_")
ggplot(dna.plot, aes(x = DNA.concentration.ng.uL, y = Depth))+
geom_point()+
geom_path()+
facet_wrap(~Facet)
ggplot(dna.plot, aes(x = DNA.concentration.ng.uL, y = Depth))+
geom_point()+
geom_path()
View(dna.plot)
View(dna.plot)
ggplot(dna.plot, aes(x = DNA.concentration.ng.uL, y = Pressure.decibars))+
geom_point()+
geom_path()+
facet_wrap(~Facet)
ggplot(dna.plot, aes(x = DNA.concentration.ng.uL, y = Pressure.decibars))+
geom_point()+
geom_path()+
scale_y_reverse()+
facet_wrap(~Facet)
View(dna.plot)
colnames(dna.plot)
dna.plot[dna.plot$Facet=="P16S_S05", c("DNA_ID", "Pressure.decibars", "DNA.concentration.ng.uL")]
dna.plot <- dna.plot[with(dna.plot[order(dna.plot$Pressure.decibars)]),]
dna.plot <- dna.plot[order(-Pressure.decibars),]
dna.plot <- dna.plot[order(-dna.plot$Pressure.decibars),]
dna.plot[dna.plot$Facet=="P16S_S05", c("DNA_ID", "Pressure.decibars", "DNA.concentration.ng.uL")]
dna.plot[dna.plot$Facet=="P16S_S05", c("DNA_ID", "Pressure.decibars", "DNA.concentration.ng.uL")]
ggplot(dna.plot, aes(x = DNA.concentration.ng.uL, y = Pressure.decibars))+
geom_point()+
geom_path()+
scale_y_reverse()+
facet_wrap(~Facet)
dna.plot[dna.plot$Facet=="P16S_S47", c("DNA_ID", "Pressure.decibars", "DNA.concentration.ng.uL")]
dna.plot[dna.plot$Facet=="P16S_S84", c("DNA_ID", "Pressure.decibars", "DNA.concentration.ng.uL")]
